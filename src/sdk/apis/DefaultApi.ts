/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  LoginDetails,
  LoginReturn,
  UserSetType,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LoginDetailsFromJSON,
    LoginDetailsToJSON,
    LoginReturnFromJSON,
    LoginReturnToJSON,
    UserSetTypeFromJSON,
    UserSetTypeToJSON,
} from '../models';

export interface CreateAccountCreateAccountPostRequest {
    loginDetails: LoginDetails;
}

export interface LoginLoginPostRequest {
    loginDetails: LoginDetails;
}

export interface SetTypeUserSetTypePatchRequest {
    userSetType: UserSetType;
}

export interface TokenTokenPostRequest {
    username: string;
    password: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Account
     */
    async createAccountCreateAccountPostRaw(requestParameters: CreateAccountCreateAccountPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginReturn>> {
        if (requestParameters.loginDetails === null || requestParameters.loginDetails === undefined) {
            throw new runtime.RequiredError('loginDetails','Required parameter requestParameters.loginDetails was null or undefined when calling createAccountCreateAccountPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/createAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDetailsToJSON(requestParameters.loginDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginReturnFromJSON(jsonValue));
    }

    /**
     * Create Account
     */
    async createAccountCreateAccountPost(requestParameters: CreateAccountCreateAccountPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginReturn> {
        const response = await this.createAccountCreateAccountPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login
     */
    async loginLoginPostRaw(requestParameters: LoginLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginReturn>> {
        if (requestParameters.loginDetails === null || requestParameters.loginDetails === undefined) {
            throw new runtime.RequiredError('loginDetails','Required parameter requestParameters.loginDetails was null or undefined when calling loginLoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDetailsToJSON(requestParameters.loginDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginReturnFromJSON(jsonValue));
    }

    /**
     * Login
     */
    async loginLoginPost(requestParameters: LoginLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginReturn> {
        const response = await this.loginLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Root
     */
    async rootGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Root
     */
    async rootGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.rootGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set Type
     */
    async setTypeUserSetTypePatchRaw(requestParameters: SetTypeUserSetTypePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.userSetType === null || requestParameters.userSetType === undefined) {
            throw new runtime.RequiredError('userSetType','Required parameter requestParameters.userSetType was null or undefined when calling setTypeUserSetTypePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/user/setType`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserSetTypeToJSON(requestParameters.userSetType),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Set Type
     */
    async setTypeUserSetTypePatch(requestParameters: SetTypeUserSetTypePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.setTypeUserSetTypePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Token
     */
    async tokenTokenPostRaw(requestParameters: TokenTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling tokenTokenPost.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling tokenTokenPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret as any);
        }

        const response = await this.request({
            path: `/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Token
     */
    async tokenTokenPost(requestParameters: TokenTokenPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.tokenTokenPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
